<?php

namespace MiladRahimi\PhpRouter\Tests;

use Closure;
use MiladRahimi\PhpRouter\Enums\HttpMethods;
use MiladRahimi\PhpRouter\Router;
use MiladRahimi\PhpRouter\Services\PublisherInterface;
use MiladRahimi\PhpRouter\Tests\Classes\Publisher;
use PHPUnit\Framework\TestCase as BaseTestCase;

/**
 * Class TestCase
 *
 * @package MiladRahimi\PhpRouter\Tests
 */
class TestCase extends BaseTestCase
{
    protected function setUp()
    {
        parent::setUp();

        $this->mockRequest(HttpMethods::GET, 'http://example.com/');
    }

    /**
     * Mock http server request ($_SERVER)
     *
     * @param string $method
     * @param string $url
     */
    protected function mockRequest(string $method, string $url)
    {
        $urlParts = parse_url($url);

        $_SERVER['SERVER_NAME'] = $urlParts['scheme'].'://'.$urlParts['host'];
        $_SERVER['REQUEST_URI'] = ($urlParts['path'] ?? '/').'?'.($urlParts['query'] ?? '');
        $_SERVER['REQUEST_METHOD'] = $method;
    }

    /**
     * Get router instance with mocked properties
     *
     * @param string $prefix
     * @param string $namespace
     * @return Router
     */
    protected function router(string $prefix = '', string $namespace = ''): Router
    {
        $router = new Router($prefix, $namespace);
        $router->setPublisher(new Publisher());

        return $router;
    }

    /**
     * Get the simplest controller
     *
     * @return Closure
     */
    protected function controller(): Closure
    {
        return function () {
            return 'OK';
        };
    }

    /**
     * Get output generated by current request after the router dispatch
     *
     * @param Router $router
     * @return string
     */
    protected function extract(Router $router)
    {
        /** @var Publisher $publisher */
        $publisher = $router->getPublisher();

        return $publisher->output;
    }

    /**
     * Get router publisher
     *
     * @param Router $router
     * @return PublisherInterface|Publisher
     */
    protected function publisherOf(Router $router): Publisher
    {
        return $router->getPublisher();
    }
}
